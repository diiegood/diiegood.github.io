

#codigo principal que usa el complementario de  ###random_variables###
####archivo de soporte####  / script de llamamiento
#primero se corre el otro script al que va llamar, despues al principal#

#librerias#
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import scipy.stats as st
import importlib

#se importan nuestros propios archivos y se vuelven a cargar#
import random_variables
importlib.reload(random_variables)

#la variable que se desee generar puede ser#
### normal, student, uniform exponential, chi-squared###
#inputs
coeff = 5   #df student, chi2, scala en exponencial#
size = 10**6  
random_variable_type = "normal" #aqui va la funcion que se desea generar#
decimals = 5 

#con esta linea se llama el archivo creado con este nombre#
sim = random_variables.simulator(coeff, random_variable_type)
sim.generate_vector()
sim.compute_stats()
sim.plot()



x = sim.vector
 
#esto es otro codigo# codigo 2

# Code
str_title = random_variable_type
if random_variable_type == "normal":
    x = np.random.standard_normal(size=size)
elif random_variable_type == "student":
    x = np.random.standard_t(df=coeff, size=size)
    str_title += " df=" + str(coeff)
elif random_variable_type == "uniform":
    x = np.random.uniform(size=size)
elif random_variable_type == "exponential":
    x = np.random.exponential(scale=coeff, size=size)
    str_title += " scale=" + str(coeff)
elif random_variable_type == "chi-squared":
    x = np.random.chisquare(df=coeff, size=size)
    str_title += " df=" + str(coeff)
    
    
mu = st.tmean(x) #tmean
sigma = st.tstd(x) #tstd
skewness = st.skew(x) #skew  kurt = st.kurtosis(x) #kurt
kurt = st.kurtosis(x)
  #test de jarque bera#
jb_stat = size/6 *(skewness**2 + 1/4*kurt**2)  
p_value = 1 - st.chi2.cdf(jb_stat, df=2)
is_normal = (p_value > 0.05)

str_title += "\n" + "mean=" + str(np.round(mu, decimals)) \
    + "|" + "volatility=" + str(np.round(sigma, decimals)) \
    + "\n" + "skewness=" + str(np.round(skewness, decimals)) \
    + "|" + "kurtosis=" + str(np.round(kurt, decimals)) \
    + "\n" + "JB stat=" + str(np.round(jb_stat, decimals)) \
    + "|" + "p-value=" + str(np.round(p_value, decimals)) \
    + "\n" + "is_normal=" + str(is_normal)

plt.figure()
plt.hist(x, bins=100)
plt.title(str_title)
plt.show()


#para probar si los valores coinciden con el de la grafica#
#se nombran directamente desde la terminal#
sim.mean
sim.volatility
sim.skewness
sim.kurtosis
sim.jb_stat
sim.p_value
sim.is_normal

